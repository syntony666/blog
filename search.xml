<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用 Hexo 建立網站是否搞錯了什麼</title>
      <link href="/archives/hexo-1/"/>
      <url>/archives/hexo-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-是什麼？"><a href="#Hexo-是什麼？" class="headerlink" title="Hexo 是什麼？"></a>Hexo 是什麼？</h2><p><del>其實這我也不知道欸</del> </p><p>我只知道他是一個可以讓你利用 markdown 語法寫文章，讓你用簡單的方式建立一個好看的網站</p><p>然後他是用 node 生成網頁的，所以你會需要 npm 來安裝他</p><h2 id="安裝-Hexo-CLI"><a href="#安裝-Hexo-CLI" class="headerlink" title="安裝 Hexo CLI"></a>安裝 Hexo CLI</h2><p>看到了這個標題，可能有人會問，什麼是CLI?</p><p>簡單來說就是可以讓你下指令的工具</p><p>既然都解釋完了，那我們先安裝 npm 吧！</p><h3 id="安裝NPM"><a href="#安裝NPM" class="headerlink" title="安裝NPM"></a>安裝NPM</h3><p>到 <a href="https://nodejs.org/en/download/package-manager/">Node官網</a> 依照自己的作業系統選取安裝方式</p><p><del>絕對不是我懶才不寫的</del></p><p>安裝後在終端機輸入 <code>npm -v</code></p><p>如果有出現一組版本號而不是奇怪的訊息，代表你成功安裝了</p><h3 id="安裝-Hexo-CLI-1"><a href="#安裝-Hexo-CLI-1" class="headerlink" title="安裝 Hexo CLI"></a>安裝 Hexo CLI</h3><p>上面沒問題後，終端機不要關掉，我們在終端機輸入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>接著等他跑完，<del>warning不要理他</del></p><p>就安裝完了</p><h2 id="建立並設定網站"><a href="#建立並設定網站" class="headerlink" title="建立並設定網站"></a>建立並設定網站</h2><h3 id="新增-Hexo-專案"><a href="#新增-Hexo-專案" class="headerlink" title="新增 Hexo 專案"></a>新增 Hexo 專案</h3><p>在想要放網站的上一個資料夾中打開終端機，輸入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new your_new_website</span><br></pre></td></tr></table></figure><p>等他跑完後，進到網站資料夾後，你就會一堆奇奇怪怪的東西</p><p>我們先不要理會裡面的東東，<del>我們在乎的是結果</del></p><p>接著在終端機輸入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>接著打開瀏覽器輸入 <code>http://localhost:4000</code> 你就會看到精美的網頁呈現在你面前</p><p>接下來我們就要把這個網頁變成自己的形狀</p><h3 id="安裝主題套件"><a href="#安裝主題套件" class="headerlink" title="安裝主題套件"></a>安裝主題套件</h3><p>到 <a href="https://hexo.io/themes/">Hexo 主題網站</a> 尋找你喜歡的樣式後，進入該主題的github將它下載下來</p><p>建議直接下載zip檔，省去之後刪除 <code>.git/</code> 的麻煩</p><p>下載並解壓縮後，將該資料夾放入 <code>theme/</code> 中，並在 <code>_config.yml</code> 中的theme欄位改成</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">&lt;your_theme_name&gt;</span></span><br></pre></td></tr></table></figure><p>我自己適用 cactus 這個主題，所以下面有關主題的設定，我會使用 cactus 來教學</p><h3 id="資料夾結構"><a href="#資料夾結構" class="headerlink" title="資料夾結構"></a>資料夾結構</h3><p>我們到網站資料夾內會看到這樣子的檔案結構：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── source</span><br><span class="line">│   └── _posts/</span><br><span class="line">├── themes</span><br><span class="line">│   ├── cactus/</span><br><span class="line">│   └── landscape/</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><ul><li><code>_config.yml</code> 是這個網站的設定檔，主要設定都放在這裡</li><li><code>scaffolds/</code> 資料夾內放的是新增文章時系統會幫你預設的範本</li><li><code>source/</code> 資料夾內會放你的每一篇文章</li><li><code>theme/</code> 資料夾內有你下載的各種主題</li><li>其他沒提到的就是npm, node 自帶的設定檔，可以當作沒看到</li></ul><h3 id="設定網頁資料"><a href="#設定網頁資料" class="headerlink" title="設定網頁資料"></a>設定網頁資料</h3><p>現在我們只需要好好的來看看 <code>_config.yml</code> 裡到底裝了什麼神秘的東西</p><p>我們先看第一段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>就… 看著英文標題指示輸入吧</p><p>下一段，這有點東西啊…</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><p>第4行的 <code>root</code> 是如果你的網站的網址是 <code>yourwebsite.com/blabla/</code> ，那你的 <code>root</code> 就要填入 <code>/blabla/</code> </p><p>第5行的 <code>permalink</code> 是如果你想要更改後面網址的樣子可以自己更改</p><p><del>中間不怎麼重要</del></p><p>接下來我們到最下面deploy的部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>空空如也，這東西我們等等處理，先把他記起來</p><p>接著，我們點進 <code>theme/</code> 發現裡面也有一個 <code>_config.yml</code> </p><p>就照著上面英文註解填寫</p><p>最後記得在終端機輸入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>確認自己網頁的樣子</p><h3 id="部署到-Github"><a href="#部署到-Github" class="headerlink" title="部署到 Github"></a>部署到 Github</h3><p>前置動作：<a href="">建立網站？ GitHub Page！</a> (尚未完成，敬請期待)</p><p>然後在終端機輸入下列指令來新增 git 部署套件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>接著在剛剛 <code>_config.yml</code> deploy 的位置改成這樣：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;your_GitHub_repo&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br><span class="line">  <span class="attr">message:</span></span><br></pre></td></tr></table></figure><p>輸入下列指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br></pre></td></tr></table></figure><p>這樣就完成了！</p><blockquote><p>  這篇的教學可能稍顯粗略，如果有什麼需要筆者補充或修正的，歡迎在下方留言區留言，我會盡快回覆！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Github Page </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> GitHub-page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discord 對話機器人製作全記錄（六）</title>
      <link href="/archives/discord-bot6/"/>
      <url>/archives/discord-bot6/</url>
      
        <content type="html"><![CDATA[<h1 id="新增、修改及刪除回應組合"><a href="#新增、修改及刪除回應組合" class="headerlink" title="新增、修改及刪除回應組合"></a>新增、修改及刪除回應組合</h1><p>上一篇我們讓機器人可以利用資料庫，讓機器人知道我們說哪些話時，他需要回應我們什麼。但是如果我們想更動的話，我們就必須去操作資料庫，感覺很不方便，所以我們可以利用指令去設定機器人的回應組合。</p><blockquote><p>此文的機器人前綴為 “ ; “ ，若一個指令為 <code>;command subcommand</code>，</p><p>則command為主指令，subcommand為子指令</p></blockquote><h2 id="新增機器人指令"><a href="#新增機器人指令" class="headerlink" title="新增機器人指令"></a>新增機器人指令</h2><p>還記得 <code>on_message()</code> 嗎？</p><p>我們當然可以使用這個方法來新增機器人指令，但如果指令一多，程式會顯得非常肥大，像是下面這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@commands.Cog.listener()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">self, message</span>):</span><br><span class="line">    <span class="keyword">if</span> message.author == <span class="variable language_">self</span>.bot.user: <span class="comment"># 確認傳訊者不是機器人避免洗版</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    found = <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one(&#123;<span class="string">&#x27;server&#x27;</span>: message.guild.<span class="built_in">id</span>, <span class="string">&#x27;receive&#x27;</span>: message.content&#125;)</span><br><span class="line">    <span class="keyword">if</span> found <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">await</span> message.channel.send(found[<span class="string">&#x27;send&#x27;</span>])</span><br><span class="line">  <span class="keyword">if</span> message.content[<span class="number">0</span>] == <span class="string">&quot;;command01&quot;</span>:</span><br><span class="line">        <span class="comment"># do something...</span></span><br><span class="line">  <span class="keyword">elif</span> message.content[<span class="number">0</span>] == <span class="string">&quot;;command02&quot;</span>:</span><br><span class="line">        <span class="comment"># do something...</span></span><br><span class="line">  <span class="keyword">elif</span> message.content[<span class="number">0</span>] == <span class="string">&quot;;command03&quot;</span>:</span><br><span class="line">        <span class="comment"># do something...</span></span><br><span class="line">  <span class="keyword">elif</span> message.content[<span class="number">0</span>] == <span class="string">&quot;;command04&quot;</span>:</span><br><span class="line">        <span class="comment"># do something...</span></span><br><span class="line">  <span class="keyword">elif</span> message.content[<span class="number">0</span>] == <span class="string">&quot;;command05&quot;</span>:</span><br><span class="line">        <span class="comment"># do something...</span></span><br></pre></td></tr></table></figure><p>感覺就不是很妥當，所以 discord.py 讓我們可以利用 <code>@commands.command()</code> 來處理機器人的指令。</p><h3 id="指令函式"><a href="#指令函式" class="headerlink" title="指令函式"></a>指令函式</h3><p>下列程式碼是設定指令的方式，我們先看一下，再來解釋這東西在做什麼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@commands.command(<span class="params">aliases=[<span class="string">&#x27;alias1&#x27;</span>,<span class="string">&#x27;alias2&#x27;</span>,<span class="string">&#x27;alias3&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">command_name</span>(<span class="params">ctx, arg, arg2</span>):</span><br><span class="line">  <span class="comment"># do something</span></span><br></pre></td></tr></table></figure><p>第一行的 <code>@commands.command()</code> 是告訴程式說這是一個指令，而指令的名稱就是下面那行的 <code>command_name</code>，括號中的aliases指的是利用陣列中的字串也能呼叫該指令，所以如果不需要括號中就不用放東西。</p><p>第二行括號中的ctx代表這個指令的訊息物件，就跟上面 <code>on_message()</code> 中的 message是同一個東西，如果後面還有其他參數就直接增加參數數量就行了。</p><h3 id="指令函式組"><a href="#指令函式組" class="headerlink" title="指令函式組"></a>指令函式組</h3><p>當我們想在同一個主指令下新增子指令時，我們可能會需要再大指令內使用很多if判斷式來判斷有沒有這個指令，所以 discord.py 也提供我們用 <code>@group.command()</code> 的方式來增加子函式，用法如下列程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@group.command(<span class="params">aliases=[<span class="string">&#x27;alias1&#x27;</span>,<span class="string">&#x27;alias2&#x27;</span>,<span class="string">&#x27;alias3&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">command_name</span>(<span class="params">ctx</span>):<span class="comment"># ;command_name</span></span><br><span class="line">  <span class="comment"># do something</span></span><br><span class="line"><span class="meta">@command_name.command(<span class="params">aliases=[<span class="string">&#x27;alias1&#x27;</span>,<span class="string">&#x27;alias2&#x27;</span>,<span class="string">&#x27;alias3&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subcommand1</span>(<span class="params">ctx</span>):<span class="comment"># ;command_name subcommand1</span></span><br><span class="line">  <span class="comment"># do something</span></span><br><span class="line"><span class="meta">@command_name.command(<span class="params">aliases=[<span class="string">&#x27;alias1&#x27;</span>,<span class="string">&#x27;alias2&#x27;</span>,<span class="string">&#x27;alias3&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subcommand2</span>(<span class="params">ctx</span>):<span class="comment"># ;command_name subcommand2</span></span><br><span class="line">  <span class="comment"># do something</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 註解內容為指令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我們只要把主指令的  <code>@commands.command</code> 改成 <code>@group.command</code> ，然後子指令上加一行 <code>@command_name.command</code> 就行了。</p><h2 id="利用指令操作資料庫"><a href="#利用指令操作資料庫" class="headerlink" title="利用指令操作資料庫"></a>利用指令操作資料庫</h2><h3 id="設定主指令"><a href="#設定主指令" class="headerlink" title="設定主指令"></a>設定主指令</h3><p>我們將主指令設為 <strong>reply</strong> ， 而且單純只輸入主指令時，機器人是不會反應的，所以我們就直接使用 <code>pass</code> 語句來讓主函式不做事，至於要做其他處理，先別急，在往後幾篇會提到。</p><p>我們先增加一個檔案叫做 <code>reply.py</code> ，然後輸入下列程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> discord</span><br><span class="line"><span class="keyword">from</span> discord.ext <span class="keyword">import</span> commands</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reply</span>(commands.Cog):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bot</span>):</span><br><span class="line">        <span class="variable language_">self</span>.bot = bot</span><br><span class="line">        mongoClinet = MongoClient(&lt;database_url&gt;)</span><br><span class="line">        <span class="variable language_">self</span>.db = mongoClient[<span class="string">&#x27;bot-db&#x27;</span>]</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @group.command()</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">reply</span>(<span class="params">self, message</span>):   <span class="comment">#做一個不做事的指令</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">bot</span>):</span><br><span class="line">    bot.add_cog(Reply(bot))</span><br></pre></td></tr></table></figure><p><del>就這樣，我們創造了一個不做事的主指令了</del></p><h3 id="設定新增及修改指令"><a href="#設定新增及修改指令" class="headerlink" title="設定新增及修改指令"></a>設定新增及修改指令</h3><p>上面我們新增一個不做事的指令，現在我們可以利用子指令來讓機器人去新增回應組合，程式碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@reply.command(<span class="params">aliases=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;add&#x27;</span>]</span>)</span><span class="comment"># 增加指令的同義詞</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">add_reply</span>(<span class="params">self, ctx, keyword, *, msg</span>):</span><br><span class="line">    server = ctx.message.guild.<span class="built_in">id</span><span class="comment"># 獲取伺服器ID</span></span><br><span class="line">    found = <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one(&#123;<span class="string">&#x27;server&#x27;</span>: server, <span class="string">&#x27;receive&#x27;</span>: keyword&#125;)<span class="comment"># 搜尋回應組合</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> found <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:<span class="comment"># 如果在資料庫有該回應組合，則直接修改</span></span><br><span class="line">        <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one_and_update(&#123;<span class="string">&#x27;server&#x27;</span>: server, <span class="string">&#x27;receive&#x27;</span>: keyword&#125;, &#123;<span class="string">&#x27;$set&#x27;</span>: &#123;<span class="string">&#x27;send&#x27;</span>: msg&#125;&#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].insert(&#123;<span class="string">&#x27;server&#x27;</span>: server, <span class="string">&#x27;receive&#x27;</span>: keyword, <span class="string">&#x27;send&#x27;</span>: msg&#125;)<span class="comment"># 若無，則加進資料庫</span></span><br></pre></td></tr></table></figure><p>第一行的 aliases ，可以讓我們輸入 <code>;reply a aaa bbb</code>、 <code>;reply add aaa bbb</code> 或 <code>;reply add_reply aaa bbb</code> ，都可以讓機器人在我們說aaa的時候回應bbb</p><p>第七行的 <code>find_one_and_update</code> 的第一個參數是搜尋匹配值，第二個是將找到的資料更改成 <code>$set</code> 後面的dict</p><p>就這樣，我們就可以讓機器人去新增回應組合了</p><h3 id="設定刪除指令"><a href="#設定刪除指令" class="headerlink" title="設定刪除指令"></a>設定刪除指令</h3><p>有時候我們會誤觸到一些語句讓機器人一直亂回應，我們可以利用子指令叫機器人把那個回應組合刪掉，程式碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@reply.command(<span class="params">aliases=[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">delete_reply</span>(<span class="params">self, ctx, keyword</span>):</span><br><span class="line">    server = ctx.message.guild.<span class="built_in">id</span></span><br><span class="line">    found = <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one(&#123;<span class="string">&#x27;server&#x27;</span>: server, <span class="string">&#x27;receive&#x27;</span>: keyword&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> found <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one_and_delete(&#123;<span class="string">&#x27;server&#x27;</span>: server, <span class="string">&#x27;receive&#x27;</span>: keyword&#125;)</span><br></pre></td></tr></table></figure><p>第七行的 <code>find_one_and_delete</code> 的參數是搜尋匹配值，然後將符合條件的刪掉一個</p><p>所以當我們輸入 <code>;reply d aaa</code>、 <code>;reply delete aaa</code> 或 <code>;reply delete_reply aaa</code> ，就可以刪除該aaa的回應組合</p><h3 id="列出回應列表指令"><a href="#列出回應列表指令" class="headerlink" title="列出回應列表指令"></a>列出回應列表指令</h3><p>回應組合用久了，數量一定會變多，這時我們需要一個列表來看到底有哪些回應組合，我們可以叫機器人幫我們列出來，程式碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@reply.command(<span class="params">aliases=[<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;list&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_list</span>(<span class="params">self, ctx</span>):</span><br><span class="line">    <span class="keyword">if</span> ctx.invoked_subcommand <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        server = ctx.message.guild.<span class="built_in">id</span></span><br><span class="line">        <span class="keyword">await</span> ctx.channel.purge(limit=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one(&#123;<span class="string">&#x27;server&#x27;</span>: server&#125;) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">await</span> ctx.send(<span class="string">&#x27;**沒有回應列表**&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find(&#123;<span class="string">&#x27;server&#x27;</span>: server&#125;):</span><br><span class="line">        <span class="keyword">await</span> ctx.send(x[<span class="string">&#x27;receive&#x27;</span>]+<span class="string">&#x27;: &#x27;</span>+x[<span class="string">&#x27;send&#x27;</span>])</span><br></pre></td></tr></table></figure><p>我們可以用find來尋找在這伺服器中使用的所有回應組合，然後利用迴圈印出來</p><p>我們已經完整地作出回應機器人了，但他現在只能在自己的電腦上跑，這樣風險有點高</p><p>下一篇，我們來讓機器人在免費伺服器運作</p><h2 id="範例程式碼"><a href="#範例程式碼" class="headerlink" title="範例程式碼"></a>範例程式碼</h2><h3 id="reply-py"><a href="#reply-py" class="headerlink" title="reply.py"></a>reply.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> discord</span><br><span class="line"><span class="keyword">from</span> discord.ext <span class="keyword">import</span> commands</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reply</span>(commands.Cog):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bot</span>):</span><br><span class="line">        <span class="variable language_">self</span>.bot = bot</span><br><span class="line">        mongoClinet = MongoClient(&lt;database_url&gt;)</span><br><span class="line">        <span class="variable language_">self</span>.db = mongoClient[<span class="string">&#x27;bot-db&#x27;</span>]</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @group.command()</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">reply</span>(<span class="params">self, message</span>):   <span class="comment">#做一個不做事的指令</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @reply.command(<span class="params">aliases=[<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;list&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_list</span>(<span class="params">self, ctx</span>):</span><br><span class="line">        <span class="keyword">if</span> ctx.invoked_subcommand <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            server = ctx.message.guild.<span class="built_in">id</span></span><br><span class="line">            <span class="keyword">await</span> ctx.channel.purge(limit=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one(&#123;<span class="string">&#x27;server&#x27;</span>: server&#125;) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">await</span> ctx.send(<span class="string">&#x27;**沒有回應列表**&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find(&#123;<span class="string">&#x27;server&#x27;</span>: server&#125;):</span><br><span class="line">                <span class="keyword">await</span> ctx.send(x[<span class="string">&#x27;receive&#x27;</span>]+<span class="string">&#x27;: &#x27;</span>+x[<span class="string">&#x27;send&#x27;</span>])</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @reply.command(<span class="params">aliases=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;add&#x27;</span>]</span>)</span><span class="comment"># 增加指令的同義詞</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">add_reply</span>(<span class="params">self, ctx, keyword, *, msg</span>):</span><br><span class="line">        server = ctx.message.guild.<span class="built_in">id</span><span class="comment"># 獲取伺服器ID</span></span><br><span class="line">        found = <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one(&#123;<span class="string">&#x27;server&#x27;</span>: server, <span class="string">&#x27;receive&#x27;</span>: keyword&#125;)<span class="comment"># 搜尋回應組合</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> found <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:<span class="comment"># 如果在資料庫有該回應組合，則直接修改</span></span><br><span class="line">            <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one_and_update(&#123;<span class="string">&#x27;server&#x27;</span>: server, <span class="string">&#x27;receive&#x27;</span>: keyword&#125;, &#123;<span class="string">&#x27;$set&#x27;</span>: &#123;<span class="string">&#x27;send&#x27;</span>: msg&#125;&#125;)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].insert(&#123;<span class="string">&#x27;server&#x27;</span>: server, <span class="string">&#x27;receive&#x27;</span>: keyword, <span class="string">&#x27;send&#x27;</span>: msg&#125;)<span class="comment"># 若無，則加進資料庫</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @reply.command(<span class="params">aliases=[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">delete_reply</span>(<span class="params">self, ctx, keyword</span>):</span><br><span class="line">        server = ctx.message.guild.<span class="built_in">id</span></span><br><span class="line">        found = <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one(&#123;<span class="string">&#x27;server&#x27;</span>: server, <span class="string">&#x27;receive&#x27;</span>: keyword&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> found <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one_and_delete(&#123;<span class="string">&#x27;server&#x27;</span>: server, <span class="string">&#x27;receive&#x27;</span>: keyword&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">bot</span>):</span><br><span class="line">    bot.add_cog(Reply(bot))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discord Bot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> discord-bot </tag>
            
            <tag> Python </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discord 對話機器人製作全記錄（五）</title>
      <link href="/archives/discord-bot5/"/>
      <url>/archives/discord-bot5/</url>
      
        <content type="html"><![CDATA[<h1 id="將資料庫連結至-Discord-Bot"><a href="#將資料庫連結至-Discord-Bot" class="headerlink" title="將資料庫連結至 Discord Bot"></a>將資料庫連結至 Discord Bot</h1><p>我們在第三篇學到如何讓機器人回應我們，第四篇知道如何連接資料庫，這篇我們要應用這兩篇的方法來讓機器人使用資料庫來記憶及讀取我們要他回應的話。</p><h2 id="使用-MongoPy-連結機器人"><a href="#使用-MongoPy-連結機器人" class="headerlink" title="使用 MongoPy 連結機器人"></a>使用 MongoPy 連結機器人</h2><p>利用上一篇的方法，在 <code>event.py</code> 的 <code>__init__(self)</code> 中新增下列程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongoClinet = MongoClient(&lt;database_url&gt;)  <span class="comment"># 連結到資料庫</span></span><br><span class="line"><span class="variable language_">self</span>.db = mongoClient[<span class="string">&#x27;bot-db&#x27;</span>]</span><br></pre></td></tr></table></figure><p>在 Python 中，使用 self 可讓該變數在相同類別中使用，所以我們就可以讓這個類別去取用 DB(資料庫) 中的資料。</p><h2 id="取用資料庫"><a href="#取用資料庫" class="headerlink" title="取用資料庫"></a>取用資料庫</h2><p>我們先來看看第三篇的 <code>on_message()</code> :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@commands.Cog.listener()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">self, message</span>):</span><br><span class="line">    <span class="keyword">if</span> message.author == <span class="variable language_">self</span>.bot.user: <span class="comment"># 確認傳訊者不是機器人避免洗版</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> message.content == <span class="string">&#x27;foo&#x27;</span>: <span class="comment"># 當收到訊息為‘foo’</span></span><br><span class="line">        <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;bar&#x27;</span>) <span class="comment"># 回應‘bar’</span></span><br></pre></td></tr></table></figure><p>依照上面的範本，我們可以利用資料庫讓機器人記住更多回應組合。</p><h3 id="將回應組合寫入資料庫"><a href="#將回應組合寫入資料庫" class="headerlink" title="將回應組合寫入資料庫"></a>將回應組合寫入資料庫</h3><p>要讓機器人回話之前，我們必須先告訴機器人要回應的話跟觸發的詞語，所以我們先新增一些回應組合到 DB：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">mongoClinet = MongoClient(&lt;database_url&gt;)  <span class="comment"># 連結到資料庫</span></span><br><span class="line">db = mongoClient[<span class="string">&#x27;bot-db&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;reply&#x27;</span>]  <span class="comment"># 進入Collection，若原本沒有則會自行新增</span></span><br><span class="line"></span><br><span class="line">post = &#123;</span><br><span class="line">  <span class="string">&quot;guild&quot;</span>: &lt;your_guild_id&gt;, <span class="comment"># 請自行輸入伺服器ID</span></span><br><span class="line">  <span class="string">&quot;receive&quot;</span>: <span class="string">&#x27;fool&#x27;</span>,</span><br><span class="line">  <span class="string">&quot;send&quot;</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">collection.insert_one(post)  <span class="comment"># 插入資料</span></span><br></pre></td></tr></table></figure><p>在變數 <code>post</code>，我們儲存了伺服器 ID、觸發的話及機器人要回應的話</p><p><code>insert_one</code> 是將傳入的 post 寫入至 DB</p><p>當然，你可以自由改變 receive 與 send 的值，甚至執行多次</p><h3 id="讀取資料庫"><a href="#讀取資料庫" class="headerlink" title="讀取資料庫"></a>讀取資料庫</h3><p>資料寫入後，我們必須將資料讀取後，把結果告訴機器人讓他去回應。</p><p>我們必須先尋找內部的值，我們根據情境的不同可以利用 <code>find</code> 或是 <code>find_one</code> 來找出我們需要的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">mongoClinet = MongoClient(&lt;database_url&gt;)  <span class="comment"># 連結到資料庫</span></span><br><span class="line">db = mongoClient[<span class="string">&#x27;bot-db&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;reply&#x27;</span>]  <span class="comment"># 進入Collection</span></span><br><span class="line"></span><br><span class="line">query=&#123;<span class="string">&quot;server&quot;</span>: &lt;your_guild_id&gt;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> found <span class="keyword">in</span> collection.find(query):<span class="comment"># 尋找多個結果</span></span><br><span class="line">  <span class="built_in">print</span>(found)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(collection.find_one(query))<span class="comment"># 尋找單一結果</span></span><br></pre></td></tr></table></figure><p><code>find()</code>: 會回傳一個迭代器，必須利用for迴圈輸出結果</p><p><code>find_one()</code>: 回傳單一值，若有多個結果只會回傳一個</p><p><code>query</code>: 尋找的條件，型別為 dict</p><h2 id="讓機器人回應資料庫內的回應組合"><a href="#讓機器人回應資料庫內的回應組合" class="headerlink" title="讓機器人回應資料庫內的回應組合"></a>讓機器人回應資料庫內的回應組合</h2><p>在上面，我們知道怎麼如何寫入及讀取資料庫，現在我們可以來讓腦容量增加之後的機器人回應我們說的話了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@commands.Cog.listener()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">self, message</span>):</span><br><span class="line">    <span class="keyword">if</span> message.author == <span class="variable language_">self</span>.bot.user: <span class="comment"># 確認傳訊者不是機器人避免洗版</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    found = <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one(&#123;<span class="string">&#x27;server&#x27;</span>: message.guild.<span class="built_in">id</span>, <span class="string">&#x27;receive&#x27;</span>: message.content&#125;)</span><br><span class="line">    <span class="keyword">if</span> found <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:<span class="comment"># 當收到訊息有在資料庫內，則回應訊息</span></span><br><span class="line">        <span class="keyword">await</span> message.channel.send(found[<span class="string">&#x27;send&#x27;</span>])</span><br></pre></td></tr></table></figure><p>我們更改了兩樣東西：</p><ol><li>利用 find_one 判斷是否要回話，若找得到這伺服器中有此回應組合就回應訊息</li><li>讓機器人回應資料庫內的內容</li></ol><p>在這篇，我們讓機器人利用資料庫回應訊息，但還是需要利用程式碼來添加回應組合。</p><p>下一篇，我們會知道如何使用指令來讓機器人存取資料庫</p><h2 id="範例程式碼"><a href="#範例程式碼" class="headerlink" title="範例程式碼"></a>範例程式碼</h2><h3 id="event-py"><a href="#event-py" class="headerlink" title="event.py"></a>event.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> discord</span><br><span class="line"><span class="keyword">from</span> discord.ext <span class="keyword">import</span> commands</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span>(commands.Cog):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bot</span>):</span><br><span class="line">        <span class="variable language_">self</span>.bot = bot</span><br><span class="line">        mongoClinet = MongoClient(&lt;database_url&gt;)  <span class="comment"># 連結到資料庫</span></span><br><span class="line"><span class="variable language_">self</span>.db = mongoClient[<span class="string">&#x27;bot-db&#x27;</span>]</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @commands.Cog.listener()</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="keyword">if</span> message.author == <span class="variable language_">self</span>.bot.user: <span class="comment"># 確認傳訊者不是機器人避免洗版</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        found = <span class="variable language_">self</span>.db[<span class="string">&#x27;reply&#x27;</span>].find_one(&#123;<span class="string">&#x27;server&#x27;</span>: message.guild.<span class="built_in">id</span>, <span class="string">&#x27;receive&#x27;</span>: message.content&#125;)</span><br><span class="line">        <span class="keyword">if</span> found <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:<span class="comment"># 當收到訊息有在資料庫內，則回應訊息</span></span><br><span class="line">            <span class="keyword">await</span> message.channel.send(found[<span class="string">&#x27;send&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">bot</span>):</span><br><span class="line">    bot.add_cog(Event(bot))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discord Bot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> discord-bot </tag>
            
            <tag> Python </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discord 對話機器人製作全記錄（四）</title>
      <link href="/archives/discord-bot4/"/>
      <url>/archives/discord-bot4/</url>
      
        <content type="html"><![CDATA[<h1 id="增加機器人的腦容量"><a href="#增加機器人的腦容量" class="headerlink" title="增加機器人的腦容量"></a>增加機器人的腦容量</h1><p>在上一篇，我們讓機器人能夠回應我們，但如果我們有多個關鍵詞要回應，我們需要一個東西來裝他的回應及觸發的關鍵詞。在這篇文章，我們使用 MongoDB Atlas 線上資料庫來存取我們的回應及關鍵詞。</p><h2 id="初始化資料庫"><a href="#初始化資料庫" class="headerlink" title="初始化資料庫"></a>初始化資料庫</h2><p>進到 <a href="https://www.mongodb.com/cloud/atlas">MongoDB Atlas 官網</a> 後，按下圖右上角的 <strong>Try Free</strong> 註冊帳號。</p><p><img src="/discord-bot4-1.png"></p><p>按下 <strong>Create an Organization</strong> ，然後照步驟設定</p><p><img src="/discord-bot4-2.png"></p><p>接著會跳出下圖，一樣按下 <strong>New Project</strong> ，然後照步驟設定</p><p><img src="/discord-bot4-3.png"></p><p>最後會跳出下圖，做完這個，你就會擁有一個資料庫了，一樣按下 <strong>Build Cluster</strong> ，然後照步驟設定</p><p><img src="/discord-bot4-4.png"></p><p>新增完資料庫需要等待1~3分鐘系統初始化，結束後會看到下圖畫面</p><p><img src="/discord-bot4-5.png"></p><p>點選左側選單中的 <strong>Database Access</strong> ，點選 <strong>Add New Database User</strong> ，設定使用者帳號密碼</p><p><img src="/discord-bot4-6.png"></p><p>點選左側選單中的 <strong>Network Access</strong> ，點選 <strong>Add IP Address</strong> </p><p><img src="/discord-bot4-7.png"></p><p>點選 <strong>ALLOW ACCESS FROM ANYWHERE</strong> 後，按下  <strong>Confirm</strong></p><p><img src="/discord-bot4-8.png"></p><p>這樣我們就成功設定好資料庫了</p><h2 id="連接資料庫"><a href="#連接資料庫" class="headerlink" title="連接資料庫"></a>連接資料庫</h2><h3 id="確認資料庫URL"><a href="#確認資料庫URL" class="headerlink" title="確認資料庫URL"></a>確認資料庫URL</h3><p>點選下圖中的 <strong>CONNECT</strong> </p><p><img src="/discord-bot4-5.png"></p><p>接著，依下圖指示操作</p><p><img src="/discord-bot4-9.png"></p><p><img src="/discord-bot4-10.png"></p><p>將 <code>mongodb+srv://&lt;url&gt;</code> 記起來等等會用到</p><h3 id="使用-MongoDB-API"><a href="#使用-MongoDB-API" class="headerlink" title="使用 MongoDB API"></a>使用 MongoDB API</h3><p>安裝 mongopy (因為網址有srv所以要安裝mongo[srv])</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo[srv] pymongo</span><br></pre></td></tr></table></figure><p>接著，新增檔案 <code>database.py</code>，這個檔案只是要測試是否有連接到資料庫</p><p>在 <code>database.py</code> 寫入下列程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">mongoClinet = MongoClient(&lt;database_url&gt;)  <span class="comment"># 連結到資料庫</span></span><br><span class="line">db = mongoClient[<span class="string">&#x27;bot-db&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;aaa&#x27;</span>]  <span class="comment"># 進入Collection，若原本沒有則會自行新增</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;connected&#x27;</span>)</span><br><span class="line"></span><br><span class="line">post = &#123;<span class="string">&quot;foo&quot;</span>:<span class="string">&quot;bar&quot;</span>&#125;</span><br><span class="line">collection.insert_one(post)  <span class="comment"># 插入資料</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(collection.find_one())  <span class="comment"># 將資料從資料庫印出</span></span><br></pre></td></tr></table></figure><p>這時，我們確定可以正常連接到資料庫，下一篇，我們就可以將資料庫連結到機器人。</p>]]></content>
      
      
      <categories>
          
          <category> Discord Bot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> discord-bot </tag>
            
            <tag> Python </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discord 對話機器人製作全記錄（三）</title>
      <link href="/archives/discord-bot3/"/>
      <url>/archives/discord-bot3/</url>
      
        <content type="html"><![CDATA[<h1 id="製作回應機器人"><a href="#製作回應機器人" class="headerlink" title="製作回應機器人"></a>製作回應機器人</h1><p>在前一篇文章，我們可以讓機器人上線了，但是我們必須要讓他做點事才行。</p><p>這篇文章會教你如何讓機器人回應你所指定的話。</p><h2 id="Cog"><a href="#Cog" class="headerlink" title="Cog"></a>Cog</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>為了清楚的分類我們的指令及機器人的行為，我們可以使用Cog來將我們的指令包成不同的物件。</p><h3 id="主要架構"><a href="#主要架構" class="headerlink" title="主要架構"></a>主要架構</h3><p>在每個 Cog 文件都會包含一個類別及一個setup()來告訴Cog來取用。</p><p>形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> discord</span><br><span class="line"><span class="keyword">from</span> discord.ext <span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CogName</span>(commands.Cog): <span class="comment"># 物件需繼承 Cog</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bot</span>):</span><br><span class="line">        <span class="variable language_">self</span>.bot = bot</span><br><span class="line">        </span><br><span class="line">    ...some methods</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">bot</span>):</span><br><span class="line">    bot.add_cog(CogName(bot))</span><br></pre></td></tr></table></figure><p>在 Cog 中，處理機器人狀態需使用裝飾詞<code>@commands.Cog.listener()</code> 標註，定義指令則需使用 <code>@commands.command()</code> 標註。</p><h2 id="處理機器人狀態"><a href="#處理機器人狀態" class="headerlink" title="處理機器人狀態"></a>處理機器人狀態</h2><p>我們需要先新增一個檔案 <code>event.py</code> ，寫入下列程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> discord</span><br><span class="line"><span class="keyword">from</span> discord.ext <span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span>(commands.Cog):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bot</span>):</span><br><span class="line">        <span class="variable language_">self</span>.bot = bot</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">bot</span>):</span><br><span class="line">    bot.add_cog(Event(bot))</span><br></pre></td></tr></table></figure><h3 id="on-ready"><a href="#on-ready" class="headerlink" title="on_ready"></a>on_ready</h3><p>在上一篇文章，我們利用 Discord 自己的提示讓我們知道機器人上線了，但這方法不是不好，就感覺不夠明確，我們可以叫機器人建置好後告訴我們，我們可以在 <code>on_ready</code> 中定義準備好時的行為。</p><p>範例如下 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@commands.Cog.listener()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">on_ready</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Ready!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Logged in as ----&gt;&#x27;</span> , <span class="variable language_">self</span>.bot.user) <span class="comment"># self.bot.user 回傳 機器人名稱#1234</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ID:&#x27;</span>, <span class="variable language_">self</span>.bot.user.<span class="built_in">id</span>) <span class="comment"># self.bot.user.id 回傳 機器人ID</span></span><br></pre></td></tr></table></figure><p>將上面的函式放入 <code>event.py</code> 的 <code>class event</code> 後，在終端機輸入 <code>python3 bot.py</code> ，就會顯示下列文字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ready!</span><br><span class="line">Logged in as ----&gt;&lt;your_bot_name&gt;</span><br><span class="line">ID:&lt;your_bot_id&gt;</span><br></pre></td></tr></table></figure><p>則表示你的機器人已經上線了</p><h3 id="on-message"><a href="#on-message" class="headerlink" title="on_message"></a>on_message</h3><p>這個函式是處理當任何使用者傳訊息時，機器人要做的事，我們可以用它來向使用者回話。</p><p>這個函式接收了一個 <code>message</code> 物件，我們可以利用它來確認傳訊者的訊息內容、ID及頻道並回應傳訊者。</p><p>所以我們可以使用if判斷式來讓機器人回應，範例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@commands.Cog.listener()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">self, message</span>)</span><br><span class="line">    <span class="keyword">if</span> message.author == <span class="variable language_">self</span>.bot.user: <span class="comment"># 確認傳訊者不是機器人避免洗版</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> message.content == <span class="string">&#x27;foo&#x27;</span>: <span class="comment"># 當收到訊息為‘foo’</span></span><br><span class="line">        <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;bar&#x27;</span>) <span class="comment"># 回應‘bar’</span></span><br></pre></td></tr></table></figure><p>將上面的函式放入 <code>event.py</code> 的 <code>class event</code> 後，在終端機輸入 <code>python3 bot.py</code> ，確認機器人在線上後，當我們在機器人所在的伺服器傳送 ‘foo’ 時，他會回應我們 ‘bar’</p><h2 id="範例程式碼"><a href="#範例程式碼" class="headerlink" title="範例程式碼"></a>範例程式碼</h2><h3 id="bot-py"><a href="#bot-py" class="headerlink" title="bot.py"></a>bot.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> discord</span><br><span class="line"><span class="keyword">from</span> discord.ext <span class="keyword">import</span> commands</span><br><span class="line">bot = commands.Bot(command_prefix=<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    bot.run(<span class="string">&#x27;your_client_secret&#x27;</span>) <span class="comment"># 在括號中填入上面的 CLIENT SECRET</span></span><br></pre></td></tr></table></figure><h3 id="event-py"><a href="#event-py" class="headerlink" title="event.py"></a>event.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> discord</span><br><span class="line"><span class="keyword">from</span> discord.ext <span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span>(commands.Cog):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bot</span>):</span><br><span class="line">        <span class="variable language_">self</span>.bot = bot</span><br><span class="line"></span><br><span class="line"><span class="meta">    @commands.Cog.listener()</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">on_ready</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Ready!&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Logged in as ----&gt;&#x27;</span> , <span class="variable language_">self</span>.bot.user) <span class="comment"># self.bot.user 回傳 機器人名稱#1234</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ID:&#x27;</span>, <span class="variable language_">self</span>.bot.user.<span class="built_in">id</span>) <span class="comment"># self.bot.user.id 回傳 機器人ID</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @commands.Cog.listener()</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="keyword">if</span> message.author == <span class="variable language_">self</span>.bot.user: <span class="comment"># 確認傳訊者不是機器人避免洗版</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> message.content == <span class="string">&#x27;foo&#x27;</span>: <span class="comment"># 當收到訊息為‘foo’</span></span><br><span class="line">            <span class="keyword">await</span> message.channel.send(<span class="string">&#x27;bar&#x27;</span>) <span class="comment"># 回應‘bar’</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">bot</span>):</span><br><span class="line">    bot.add_cog(Event(bot))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discord Bot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> discord-bot </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discord 對話機器人製作全記錄（二）</title>
      <link href="/archives/discord-bot2/"/>
      <url>/archives/discord-bot2/</url>
      
        <content type="html"><![CDATA[<h1 id="Discord-設定"><a href="#Discord-設定" class="headerlink" title="Discord 設定"></a>Discord 設定</h1><h2 id="開啟-Discord-開發者模式"><a href="#開啟-Discord-開發者模式" class="headerlink" title="開啟 Discord 開發者模式"></a>開啟 Discord 開發者模式</h2><p><img src="/discord-bot2-1.png"></p><h2 id="建立-Discord-Bot"><a href="#建立-Discord-Bot" class="headerlink" title="建立 Discord Bot"></a>建立 Discord Bot</h2><h3 id="建立機器人"><a href="#建立機器人" class="headerlink" title="建立機器人"></a>建立機器人</h3><p>到 <a href="https://discord.com/developers/applications/">Discord 開發者頁面</a> 依照下圖操作：</p><p>新增機器人，然後輸入你的機器人名稱</p><p><img src="/discord-bot2-2.png"></p><p>填寫完機器人的基本資料，記住你的 <code>CLIENT ID</code> 及 <code>CLIENT SECRET</code>，等等會用到</p><p><img src="/discord-bot2-3.png"></p><h3 id="邀請你的機器人"><a href="#邀請你的機器人" class="headerlink" title="邀請你的機器人"></a>邀請你的機器人</h3><p>在網址列貼上:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://discord.com/oauth2/authorize?client_id=&lt;your_client_id&gt;&amp;scope=bot&amp;permissions=8</span><br></pre></td></tr></table></figure><p>選擇伺服器，按下邀請，就完成了</p><h2 id="製作-Discord-Bot"><a href="#製作-Discord-Bot" class="headerlink" title="製作 Discord Bot"></a>製作 Discord Bot</h2><h3 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h3><p>在一個你喜歡的地方新增一個資料夾，然後資料夾中新增 <code>bot.py</code></p><h3 id="建立-bot-py"><a href="#建立-bot-py" class="headerlink" title="建立 bot.py"></a>建立 bot.py</h3><p>在 <code>bot.py</code> 寫入下列程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> discord</span><br><span class="line"><span class="keyword">from</span> discord.ext <span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line">bot = commands.Bot(command_prefix=<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    bot.run(<span class="string">&#x27;your_client_secret&#x27;</span>) <span class="comment"># 在括號中填入上面的 CLIENT SECRET</span></span><br></pre></td></tr></table></figure><p>接著在終端機輸入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 bot.py</span><br></pre></td></tr></table></figure><p>你會看到你的機器人已經在線上了！</p>]]></content>
      
      
      <categories>
          
          <category> Discord Bot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> discord-bot </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discord 對話機器人製作全記錄（一）</title>
      <link href="/archives/discord-bot1/"/>
      <url>/archives/discord-bot1/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-環境設定"><a href="#Python-環境設定" class="headerlink" title="Python 環境設定"></a>Python 環境設定</h1><h2 id="這東西可以幹嘛？"><a href="#這東西可以幹嘛？" class="headerlink" title="這東西可以幹嘛？"></a>這東西可以幹嘛？</h2><p>我們都知道Discord是一個非常著名的遊戲通訊軟體，跟台灣人常使用的Line比起來，有更多東西可以設定跟運用，當然API的取得比Line方便，我們可以拿來做歡迎訊息、投票、回話等互動功能，甚至於權限管理及文字獄他都做得到。</p><h2 id="要怎麼做？？？"><a href="#要怎麼做？？？" class="headerlink" title="要怎麼做？？？"></a>要怎麼做？？？</h2><p>做這個機器人有很多套件可以用，你用Nodejs, Python等語言都行。一開始，我是使用Nodejs，但現在我是以Python來開發，所以這一系列文章會使用discord.py來教學。</p><p>首先，我們需要電腦上有Python，所以請依照你的作業系統的不同選擇你的安裝方法：</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>到 <a href="https://www.python.org/downloads/">Python官網</a>點Download，然後一路按繼續，記得選加到PATH不然你下指令會沒反應，直到你按下完成，就安裝完了。</p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>正常來說，系統為幫你裝好，如果你進終端機輸入python3沒反應，那就輸入下列指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3</span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>你要先安裝Homebrew這個套件管理器，指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>如果系統要叫你安裝任何東西，就大膽地按下去吧！</p><p>裝完之後就輸入下列指令後就完成了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure><p>如果卡在Updating homebrew的話可按Ctrl+C略過</p><h2 id="安裝Python-虛擬環境"><a href="#安裝Python-虛擬環境" class="headerlink" title="安裝Python 虛擬環境"></a>安裝Python 虛擬環境</h2><p>為什麼要做這件事？？？？？</p><p>簡單來說，Python安裝所有套件都是安裝在他的直譯器上，所以如果一但你不同的專案用到不同的套件，這樣你的套件庫會顯得很亂，所以我們需要在每一個專案上開不同的虛擬環境，指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><p>然後，在你的專案資料夾下輸入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv &lt;your_env_name&gt;</span><br></pre></td></tr></table></figure><p>啟動虛擬環境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /&lt;your_env_name&gt;/bin/active <span class="comment"># For Unix or Linux</span></span><br><span class="line">bot-env\Scripts\activate.bat <span class="comment"># For Windows</span></span><br></pre></td></tr></table></figure><p>接者你就可以在這狀態下安裝套件及開發了！</p><h2 id="安裝所需套件"><a href="#安裝所需套件" class="headerlink" title="安裝所需套件"></a>安裝所需套件</h2><p>我們會需要discord.py這個套件，指令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U discord.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Discord Bot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> discord-bot </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL 安裝術</title>
      <link href="/archives/wsl-1/"/>
      <url>/archives/wsl-1/</url>
      
        <content type="html"><![CDATA[<h2 id="WSL介紹"><a href="#WSL介紹" class="headerlink" title="WSL介紹"></a>WSL介紹</h2><p>WSL 全名為 Windows Subsystem for Linux (適用於 Linux 的 Windows 子系統)</p><p>簡單來說就是在 Windows 底下做一個 Linux 的系統，Microsoft 目前只有支援文字化的指令，還沒有官方圖形化介面。</p><p>而 bash 就是實現 Linux 在 Windows 運作的介面。</p><h2 id="安裝說明"><a href="#安裝說明" class="headerlink" title="安裝說明"></a>安裝說明</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>進入控制台&#x2F;程式集&#x2F;開啟或關閉 Windows 功能中，將”適用於 Linux 的 Windows 子系統”旁的方塊打勾</p><p>重新開機後進入 Windows 市集搜尋 Ubuntu 安裝想要的版本即可</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>以系統管理員身分執行 Powershell 輸入指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><p>重新開機後進入 Windows 市集搜尋 Ubuntu 安裝想要的版本即可</p><h2 id="基本設定"><a href="#基本設定" class="headerlink" title="基本設定"></a>基本設定</h2><h3 id="設定使用者名稱及密碼"><a href="#設定使用者名稱及密碼" class="headerlink" title="設定使用者名稱及密碼"></a>設定使用者名稱及密碼</h3><p>這裡只需照指示作即可</p><h2 id="相關指令"><a href="#相關指令" class="headerlink" title="相關指令"></a>相關指令</h2><h3 id="更新資料庫及更新套件"><a href="#更新資料庫及更新套件" class="headerlink" title="更新資料庫及更新套件"></a>更新資料庫及更新套件</h3><p>更新資料庫:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure><p>更新套件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 相關指令集</title>
      <link href="/archives/ubuntu-bash-script/"/>
      <url>/archives/ubuntu-bash-script/</url>
      
        <content type="html"><![CDATA[<h2 id="Update-the-package-lists"><a href="#Update-the-package-lists" class="headerlink" title="Update the package lists"></a>Update the package lists</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure><h2 id="Upgrade-the-package-version"><a href="#Upgrade-the-package-version" class="headerlink" title="Upgrade the package version"></a>Upgrade the package version</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure><h2 id="Install-C-with-Google-Test"><a href="#Install-C-with-Google-Test" class="headerlink" title="Install C++ with Google Test"></a>Install C++ with Google Test</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install g++ make libgtest-dev cmake</span><br><span class="line"><span class="built_in">cd</span> /usr/src/gtest</span><br><span class="line"><span class="built_in">sudo</span> cmake CMakeLists.txt</span><br><span class="line"><span class="built_in">sudo</span> make</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> *.a /usr/lib</span><br></pre></td></tr></table></figure><h2 id="Install-Java"><a href="#Install-Java" class="headerlink" title="Install Java"></a>Install Java</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install default-jdk default-jre maven</span><br></pre></td></tr></table></figure><h2 id="Install-Python"><a href="#Install-Python" class="headerlink" title="Install Python"></a>Install Python</h2><p>Linux would have installed Python 2.x and Python 3.x.</p><p>If you don’t find it, install it by using following commands:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3   //安裝python 3.x</span><br><span class="line"><span class="built_in">sudo</span> apt install python    //安裝python 2.x</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從零開始的JAVA測試專案</title>
      <link href="/archives/java-1/"/>
      <url>/archives/java-1/</url>
      
        <content type="html"><![CDATA[<h2 id="JAVA-安裝"><a href="#JAVA-安裝" class="headerlink" title="JAVA 安裝"></a>JAVA 安裝</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install default-jdk default-jre</span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>所有程式的根本都是由Hello World開始的，所以我們現在要讓我們的Java幫我們印出 <code>Hello World!!!</code></p><h3 id="hello-world-java"><a href="#hello-world-java" class="headerlink" title="hello_world.java"></a>hello_world.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello_world</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著，在終端機上輸入 <code>java hello_world.java</code></p><p>你就會看到熟悉的<code>Hello World!!!</code>出現我們面前</p><h2 id="測試驅動開發-Test-driven-development-TDD"><a href="#測試驅動開發-Test-driven-development-TDD" class="headerlink" title="測試驅動開發(Test-driven development, TDD)"></a>測試驅動開發(Test-driven development, TDD)</h2><p>筆者在大一下學期學到了一種開發方法叫做TDD，在未來的文章中，都會使用到TDD。在這種開發模式下，單元測試是很重要，詳細自己上維基百科查吧！</p><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>在C&#x2F;C++我們可以用makefile來減少輸入指令的數量，在Java，我們用的叫做Maven的套件管理工具</p><h3 id="安裝Maven-Ubuntu"><a href="#安裝Maven-Ubuntu" class="headerlink" title="安裝Maven (Ubuntu)"></a>安裝Maven (Ubuntu)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install maven</span><br></pre></td></tr></table></figure><p>使用Maven，我們需要建立Maven的資料夾結構，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└───maven-project</span><br><span class="line">    ├───pom.xml</span><br><span class="line">    └───src</span><br><span class="line">        ├───main</span><br><span class="line">        │   └───java</span><br><span class="line">        └───<span class="built_in">test</span></span><br><span class="line">            └───java</span><br></pre></td></tr></table></figure><h2 id="製作結合TDD的Maven專案"><a href="#製作結合TDD的Maven專案" class="headerlink" title="製作結合TDD的Maven專案"></a>製作結合TDD的Maven專案</h2><p>依照上一段的資料結構我們需要三個檔案：<br><code>pom.xml</code>,<code>src/main/java/main_file.java</code>,<code>src/test/java/mainTest.java</code></p><p>其中，<code>pom.xml</code>是maven專案最重要的檔案，它說明了這個專案的所有細節包含此專案所需要的Dependency</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Java Practice Unittest<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.release</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.release</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="src-x2F-main-x2F-java-x2F-Tdd-java"><a href="#src-x2F-main-x2F-java-x2F-Tdd-java" class="headerlink" title="src&#x2F;main&#x2F;java&#x2F;Tdd.java"></a>src&#x2F;main&#x2F;java&#x2F;Tdd.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tdd</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="src-x2F-test-x2F-java-x2F-mainTest-java"><a href="#src-x2F-test-x2F-java-x2F-mainTest-java" class="headerlink" title="src&#x2F;test&#x2F;java&#x2F;mainTest.java"></a>src&#x2F;test&#x2F;java&#x2F;mainTest.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mainTest</span> &#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evaluatesExpression</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Tdd</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tdd</span>();</span><br><span class="line">    assertEquals(<span class="number">7</span>, a.cal(<span class="number">2</span>,<span class="number">5</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初步試驗"><a href="#初步試驗" class="headerlink" title="初步試驗"></a>初步試驗</h2><p>準備好上面的檔案之後，在終端機上輸入 <code>mvn test</code></p><p>當你看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running mainTest</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.058 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br></pre></td></tr></table></figure><p>代表你成功使用Java製作出結合TDD的Maven專案!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
